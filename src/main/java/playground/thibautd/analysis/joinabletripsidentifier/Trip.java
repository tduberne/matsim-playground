/* *********************************************************************** *
 * project: org.matsim.*
 * Trip.java
 *                                                                         *
 * *********************************************************************** *
 *                                                                         *
 * copyright       : (C) 2011 by the members listed in the COPYING,        *
 *                   LICENSE and WARRANTY file.                            *
 * email           : info at matsim dot org                                *
 *                                                                         *
 * *********************************************************************** *
 *                                                                         *
 *   This program is free software; you can redistribute it and/or modify  *
 *   it under the terms of the GNU General Public License as published by  *
 *   the Free Software Foundation; either version 2 of the License, or     *
 *   (at your option) any later version.                                   *
 *   See also COPYING, LICENSE and WARRANTY file                           *
 *                                                                         *
 * *********************************************************************** */
package playground.thibautd.analysis.joinabletripsidentifier;

import org.matsim.api.core.v01.Id;
import org.matsim.api.core.v01.events.ActivityEndEvent;
import org.matsim.api.core.v01.events.ActivityStartEvent;
import org.matsim.api.core.v01.events.Event;
import org.matsim.api.core.v01.events.PersonArrivalEvent;
import org.matsim.api.core.v01.events.PersonDepartureEvent;
import org.matsim.api.core.v01.population.Person;

import java.util.Collections;
import java.util.List;

/**
 * Represents an individual trip, as it appears in the events
 * @author thibautd
 */
public class Trip {
	private static long idCount = 0;

	private final Id<Trip> tripId;
	private final int tripNumber;
	private final ActivityEndEvent originActivityEnd;
	private final PersonDepartureEvent departure;
	private final PersonArrivalEvent arrival;
	private final ActivityStartEvent destinationActivityStart;
	private final List<Event> routeEvents;

	// /////////////////////////////////////////////////////////////////////////
	// constructor
	// /////////////////////////////////////////////////////////////////////////
	public Trip(
			final int tripNumber,
			final ActivityEndEvent actEnd,
			final PersonDepartureEvent departure,
			final PersonArrivalEvent arrival,
			final ActivityStartEvent actStart,
			final List<Event> routeEvents2) {
		this.tripId = Id.create(idCount++, Trip.class);

		this.tripNumber = tripNumber;
		this.originActivityEnd = actEnd;
		this.departure = departure;
		this.arrival = arrival;
		this.destinationActivityStart = actStart;
		this.routeEvents = Collections.unmodifiableList(routeEvents2);
	}

	// /////////////////////////////////////////////////////////////////////////
	// getters
	// /////////////////////////////////////////////////////////////////////////
	/**
	 * Gets the Id for this trip.
	 *
	 * @return The Id.
	 */
	public Id<Trip> getId() {
		return this.tripId;
	}

	/**
	 * Gets the Id of the agent.
	 *
	 * @return The id of the agent.
	 */
	public Id<Person> getAgentId() {
		return this.departure.getPersonId();
	}

	/**
	 * Gets the number of the leg in the agent's plan, starting at 1.
	 *
	 * @return The number of the leg.
	 */
	public int getTripNumber() {
		return this.tripNumber;
	}

	/**
	 * Gets the mode for this trip.
	 *
	 * @return The mode.
	 */
	public String getMode() {
		return this.departure.getLegMode();
	}

	/**
	 * Gets the event related to the end of the origin activity
	 *
	 * @return the event
	 */
	public ActivityEndEvent getOriginActivityEnd() {
		return this.originActivityEnd;
	}

	/**
	 * Gets the departure event for this trip.
	 *
	 * @return The departure event.
	 */
	public PersonDepartureEvent getDeparture() {
		return this.departure;
	}

	/**
	 * Gets the arrival event for this trip.
	 *
	 * @return The arrival time.
	 */
	public PersonArrivalEvent getArrival() {
		return this.arrival;
	}

	/**
	 * Gets the event related to the start of the destination activity
	 *
	 * @return the event
	 */
	public ActivityStartEvent getDestinationActivityStart() {
		return this.destinationActivityStart;
	}

	/**
	 * Gets the succession of events correponding to this trip.
	 *
	 * @return the list of events generated by this trip.
	 */
	public List<Event> getRouteEvents() {
		return this.routeEvents;
	}
}

