/* *********************************************************************** *
 * project: org.matsim.*
 * UniqueIdFactory.java
 *                                                                         *
 * *********************************************************************** *
 *                                                                         *
 * copyright       : (C) 2012 by the members listed in the COPYING,        *
 *                   LICENSE and WARRANTY file.                            *
 * email           : info at matsim dot org                                *
 *                                                                         *
 * *********************************************************************** *
 *                                                                         *
 *   This program is free software; you can redistribute it and/or modify  *
 *   it under the terms of the GNU General Public License as published by  *
 *   the Free Software Foundation; either version 2 of the License, or     *
 *   (at your option) any later version.                                   *
 *   See also COPYING, LICENSE and WARRANTY file                           *
 *                                                                         *
 * *********************************************************************** */
package playground.thibautd.utils;

import org.matsim.api.core.v01.Id;
import org.matsim.core.basic.v01.IdImpl;

/**
 * Factory for getting unique ids
 *
 * @author thibautd
 */
public class UniqueIdFactory {
	private final String prefix;

	private long count = 0;

	/**
	 * creates a new factory.
	 *
	 * @param prefix a string by which to prefix every produced id.
	 * It should not contain space (this is not checked). The idea is
	 * that ids identifying different kind of objects should not be equal.
	 */
	public UniqueIdFactory(final String prefix) {
		this.prefix = prefix;
	}

	/**
	 * Creates a new Id. This method is thread safe: calling it
	 * simultaneously from different threads will never result in
	 * identical Ids.
	 *
	 * @return a new Id, guaranteed to be different from any id
	 * previously generated by this factory.
	 */
	public synchronized Id createNextId() {
		count++;

		if (count == Long.MAX_VALUE){
			throw new IllegalStateException( "no more ids!" );
		}

		return new IdImpl( prefix+"-"+count );
	}
}

